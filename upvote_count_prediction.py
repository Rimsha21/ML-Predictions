# -*- coding: utf-8 -*-
"""Upvote count Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m8nApPQe4dsTvPIvv1Qa8t1NdH9tAug-
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

from google.colab import files

files = files.upload()

import io

train = pd.read_csv(io.BytesIO(files['train_NIR5Yl1.csv']))

train.head()

train.shape

train.isnull().sum()

train.info()

train.describe()

train.drop(['ID', 'Username'], inplace=True, axis=1)
train.head()

plt.figure(figsize=(7,7))
cmap = train.corr()
sns.heatmap(cmap, annot=True)

from sklearn.preprocessing import Binarizer
bn = Binarizer(threshold=4)
pd_watched = bn.transform([train['Answers']])[0]
train['pd_watched'] = pd_watched
train.head()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
train['Tag'] = le.fit_transform(train['Tag'])
train.head()

train.plot('Tag', 'Upvotes', kind='scatter')

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
X = train.drop(['Upvotes'], axis=1)
y = train['Upvotes']
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.22, random_state=205)
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_val = sc_X.transform(X_val)

from sklearn.preprocessing import PolynomialFeatures
from sklearn import linear_model
poly_reg = PolynomialFeatures(degree=4, interaction_only=False, include_bias= True)
X_poly = poly_reg.fit_transform(X_train)
poly_reg.fit(X_train,y_train)
lin_reg_1= linear_model.LassoLars(alpha=0.021, max_iter=150)
lin_reg_1.fit(X_poly, y_train)

from sklearn.metrics import r2_score
pred = poly_reg.fit_transform(X_val)
pred_val = lin_reg_1.predict(pred)
print(r2_score(y_val, pred_val))

#test results
from google.colab import files

files = files.upload()

test = pd.read_csv(io.BytesIO(files['test_8i3B3FC.csv']))

test.head()

test.drop(['ID','Username'], axis=1,inplace=True)

le_test = LabelEncoder()
test['Tag']= le_test.fit_transform(test['Tag'])
test.head()

from sklearn.preprocessing import Binarizer
bn = Binarizer(threshold=4)
pd_watched = bn.transform([test['Answers']])[0]
test['pd_watched']= pd_watched
test.head()

test = sc_X.transform(test)

pred_test = poly_reg.fit_transform(test)
pred_imp = lin_reg_1.predict(pred_test)
pred_imp = abs(pred_imp)

sub = pd.DataFrame({'ID':ID, 'Upvotes': pred_imp})
sub.to_csv('Upvote_Prediction.csv', index=False)

