# -*- coding: utf-8 -*-
"""Copy of hr analytics

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jBDF_9UeKWAx_HdPyBm4KaYGkFmdaUsQ
"""

import numpy as np
import pandas as pd

from google.colab import files

files = files.upload()

import io

df = pd.read_csv(io.BytesIO(files['HR_comma_sep.csv']))

df.head()

df.isnull().any()

df.info()

df.describe()

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df.shape

corr = df.corr()
corr

sns.heatmap(corr)
plt.title('Heatmap of Correlation Matrix')

sns.distplot(df['satisfaction_level'])

sns.distplot(df['time_spend_company'])

sns.countplot(df['number_project'])

sns.countplot(df['Work_accident'])

df['sales'] = pd.get_dummies(df['sales'], drop_first=True)

df['salary'] = pd.get_dummies(df['salary'], drop_first=True)

df.head()

df['salary'].value_counts()

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()

df['satisfaction_level']= sc.fit_transform(df['satisfaction_level'].values.reshape(-1,1))
df['last_evaluation']= sc.fit_transform(df['last_evaluation'].values.reshape(-1,1))
df['number_project']= sc.fit_transform(df['number_project'].values.reshape(-1,1))
df['average_montly_hours']= sc.fit_transform(df['average_montly_hours'].values.reshape(-1,1))
df['time_spend_company']= sc.fit_transform(df['time_spend_company'].values.reshape(-1,1))

df.head()

df['left'].value_counts()

X = df.drop(['left'], axis=1)

y = df['left']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train , y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train.shape

sns.countplot(y="sales", hue='left', data=df).set_title('Employee Sales turnover distribution')

sns.countplot(y="promotion_last_5years", hue='left', data=df).set_title('Employee Promotion turnover distribution')

sns.countplot(y="Work_accident", hue='left', data=df).set_title('Employee Sales turnover distribution')

from sklearn.metrics import accuracy_score, roc_auc_score, classification_report, precision_score, recall_score, confusion_matrix, precision_recall_curve

from sklearn.linear_model import LogisticRegression
model = LogisticRegression(penalty='l2', C= 1)
model.fit(X_train, y_train)
print("Accuracy", round(accuracy_score(y_test, model.predict(X_test)),2))
print(confusion_matrix(y_test,model.predict(X_test)))

from sklearn import tree
from sklearn.tree import DecisionTreeClassifier
dtree = DecisionTreeClassifier(max_depth=3, min_weight_fraction_leaf=0.01)
dtree= dtree.fit(X_train,y_train)
dt_accuracy = accuracy_score(y_test, dtree.predict(X_test))
dt_roc_auc = roc_auc_score(y_test, dtree.predict(X_test))
print(dt_accuracy)
print(dt_roc_auc)

